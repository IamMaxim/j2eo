+package stdlib
+alias stdlib.prim__number
+alias stdlib.prim__boolean

[] > prim__float
  [is_left] > new
    [] > right_v
      "prim__float" > primName
      prim__number.new > @
        ^.is_left

      [right] > add
        seq > @
          if.
            right_v.primName.eq
              "prim__float"
            prim__float.constructor2
              add.
                ^.v
                right.v
            prim__float.constructor2
              add.
                ^.v
                right.v.as-float

      [right] > sub
        seq > @
          if.
            right_v.primName.eq
              "prim__float"
            prim__float.constructor2
              sub.
                ^.v
                right.v
            prim__float.constructor2
              sub.
                ^.v
                right.v.as-float

      [right] > mul
        seq > @
          if.
            right_v.primName.eq
              "prim__float"
            prim__float.constructor2
              mul.
                ^.v
                right.v
            prim__float.constructor2
              mul.
                ^.v
                right.v.as-float

      [right] > div
        seq > @
          if.
            right_v.primName.eq
              "prim__float"
            prim__float.constructor2
              div.
                ^.v
                right.v
            prim__float.constructor2
              div.
                ^.v
                right.v.as-float

      [] > neg
        seq > @
          prim__float.constructor2
            ^.v.neg

      [right] > eq
        seq > @
          if.
            right.primName.eq
              "prim__float"
            prim__boolean.constructor2
              eq.
                ^.v
                right.v
            prim__boolean.constructor2
              eq.
                ^.v
                right.v.as-float

      [right] > neq
        seq > @
          if.
            right.primName.eq
              "prim__float"
            prim__boolean.constructor2
              neq.
                ^.v
                right.v
            prim__boolean.constructor2
              neq.
                ^.v
                right.v.as-float

      [right] > less
        seq > @
          if.
            right.primName.eq
              "prim__float"
            prim__boolean.constructor2
              less.
                ^.v
                right.v
            prim__boolean.constructor2
              less.
                ^.v
                right.v.as-float

      [right] > leq
        seq > @
          if.
            right.primName.eq
              "prim__float"
            prim__boolean.constructor2
              leq.
                ^.v
                right.v
            prim__boolean.constructor2
              leq.
                ^.v
                right.v.as-float

      [right] > greater
        seq > @
          if.
            right.primName.eq
              "prim__float"
            prim__boolean.constructor2
              greater.
                ^.v
                right.v
            prim__boolean.constructor2
              greater.
                ^.v
                right.v.as-float

      [right] > geq
        seq > @
          if.
            right.primName.eq
              "prim__float"
            prim__boolean.constructor2
              geq.
                ^.v
                right.v
            prim__boolean.constructor2
              geq.
                ^.v
                right.v.as-float

    [] > this
      right_v > @

      [right] > write
        seq > @
          if.
            right.primName.eq
              "prim__float"
            seq
              ^.v.write
                right.v
              ^
            seq
              ^.v.write
                right.v.as-float
              ^

      [right] > add_equal
        seq > @
          ^.write
            ^.add
              right
          ^

      [right] > sub_equal
        seq > @
          ^.write
            ^.sub
              right
          ^

      [right] > mul_equal
        seq > @
          ^.write
            ^.mul
              right
          ^

      [right] > div_equal
        seq > @
          ^.write
            ^.div
              right
          ^

      [] > inc_post
        prim__float.constructor2 > old
          0
        seq > @
          old.v.write
            ^.v
          ^.v.write
            add.
              ^.v
              1.0
          old

      [] > dec_post
        prim__float.constructor2 > old
          0
        seq > @
          old.v.write
            ^.v
          ^.v.write
            add.
              ^.v
              -1.0
          old

      [] > inc_pre
        prim__float.constructor2 > old
          0
        seq > @
          ^.v.write
            add.
              ^.v
              1.0
          old.v.write
            ^.v
          old

      [] > dec_pre
        prim__float.constructor2 > old
          0
        seq > @
          ^.v.write
            add.
              ^.v
              -1.0
          old.v.write
            ^.v
          old

    seq > @
      if.
        is_left
        this
        right_v

  [] > constructor1
    new > self
      TRUE
    seq > @
      self

  [t] > constructor2
    new > self
      FALSE
    seq > @
      self.init
        self
        t
      self

  [i] > constructor3
    new > self
      FALSE
    seq > @
      self.init
        self
        i.v
      self
